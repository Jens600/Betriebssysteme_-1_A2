#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdatomic.h>
#include <time.h>

#define NUM_ITERATIONS 1000000

atomic_flag spinlock = ATOMIC_FLAG_INIT;

void lock() {
    while (atomic_flag_test_and_set(&spinlock)) {} // Busy-wait loop
}

void unlock() {
    atomic_flag_clear(&spinlock);
}

struct timespec diff_timespec(struct timespec start, struct timespec end) {
    struct timespec diff;
    if ((end.tv_nsec - start.tv_nsec) < 0) {
        diff.tv_sec = end.tv_sec - start.tv_sec - 1;
        diff.tv_nsec = 1000000000 + end.tv_nsec - start.tv_nsec;
    } else {
        diff.tv_sec = end.tv_sec - start.tv_sec;
        diff.tv_nsec = end.tv_nsec - start.tv_nsec;
    }
    return diff;
}

void *worker(void *arg) {
    struct timespec *timestamps = (struct timespec *)arg;
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        clock_gettime(CLOCK_MONOTONIC, &timestamps[i * 2]);
        lock();
        clock_gettime(CLOCK_MONOTONIC, &timestamps[i * 2 + 1]);
        unlock();
    }
    return NULL;
}

int main() {
    pthread_t thread;
    struct timespec *timestamps = malloc(2 * NUM_ITERATIONS * sizeof(struct timespec));
    if (!timestamps) {
        perror("malloc failed");
        return EXIT_FAILURE;
    }

    pthread_create(&thread, NULL, worker, timestamps);
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        lock();
        unlock();
    }
    pthread_join(thread, NULL);

    // Compute minimal latency
    long min_latency = 1000000000; // Start with a large value
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        struct timespec diff = diff_timespec(timestamps[i * 2], timestamps[i * 2 + 1]);
        long ns = diff.tv_sec * 1000000000L + diff.tv_nsec;
        if (ns < min_latency) {
            min_latency = ns;
        }
    }

    printf("Minimal Spinlock Latenz: %ld ns\n", min_latency);
    free(timestamps);
    return 0;
}
